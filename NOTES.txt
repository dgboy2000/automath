To test:
we don't think we've completed a goal if our predicate depends on assumptions

Can determine whether parentheses are needed in expressions by visiting the expression tree, propagating the operator precedence down, and grouping with parentheses any time there is an operation that is lower precedence than the level above. Inside the parentheses, the precedence is reset to the just-visited expression
"Suppose" means generate assumption during parsing, "therefore" labels a reduction



Want to be able to draw on multiple assertions at a time, but will consider all the variables in the assumptions as bound, so won't work. Need an assumption of a free variable to be bound or else will match anything. Maybe nested assumptions solve this? Assumptions can depend on other assumptions and be distinct states of knowledge.

Can make conflicting assumptions. Need to keep track of whether we've derived a contradiction (False)

Need a proof to imagine potential variable substitutions.

Issues: can't assign predvar to pred, messes up double negation
Turn an expression into a 2-way tree where BaseTypes know their parents. Operators won't know their parents but that's ok bc they'll have sibling BaseTypes who do.

Prove: A & B -> B & A
*1. Assume A & B
*2. A(2)
*3. B(2)
4. Axiom A | ~A
5. Axiom ~A | B -> (A -> B)
6. Axiom A|B -> B|A
*7. ~A | A (4, 6)
*8. A -> A (5, 7)
9. A&B (1, 8)
10. A&B -> A&B (9 Reduced by 1)
11. B&A (2, 3, 10)
12. Goal (11 Reduced by 1)

Quantifier/binding-aware:
Axioms
!A.A|~A
!A.!B.~A | B -> (A -> B)
!A.!B.A|B -> B|A
Goal: !A.!B.A&B->B&A
!A.~A|A
!A.A->A
Assume(1): A,B st A&B
    A(1).A
    B(1).B
    A(1),B(1).A&B->A&B
    
    
Axioms:
1) A&B -> A
2) A&B -> B
3) (A->B)&A->B

Goal: (A->B) & (B->C) -> (A->C)

4) Assume (A->B) & (B->C) 7,15
5) Assume A 1,11

Round 1
(A->B) 3,11
(B->C) 3,11

Round 2
B 1,11

Round 3
C 1,11

Round 4
Reduce: A -> C 3,11

Round 5
Reduce: (A->B) & (B->C) -> (A->C) 11    


Working backwards from goal:
Goal: (A->B) & (B->C) -> (A->C) Based on assumption so assume
Assuming (A->B) & (B->C), show A->C. store the inference that goes forward
Assuming (A->B) & (B->C) and A, show C. A is bound to the previous assumption.
Preference for applying the original     


Prover things to try:
-make a goal tree that uses theorems to infer backwards. backwards and forwards reasoning look in each other's hashes to see if things match.
-interactive prover where you can say which theorems to use, which statements to apply to
-proof checker where a proof has a formal language
-start parsing mathematical proofs
-more heuristics choosing good proof steps
-start learning what makes a good inference
-try depth-oriented prover with complexity limit
-simplification

Start making the prover modular.
-candidate generator: based on current knowledge corpus, generate a candidate next inference to perform
-inference evaluator: how promising is this inference?


Goal tree, think of as upside down inference tree. Only need to get to a branch and done.
How to know whether children are "or" or "and"? A child has an inference object

How did we get another A&B->A? See what the inference is.
Are we causing issues by converting Predicates to theorems in the knowledge corpus after the fact?

Fix remaining issues after converting from Set/Map<Predicate to Set/Map<Mappable

May need to create ExpressionAssumptionBindingVisitor and connect it to the ExpressionHashProcessor

TODO: either make equals independent of the order of assumptions or make assumptions happen in a meaningful order
TODO: modify the expression equals visitor to put the checks for number of children/assumptions/binding or not in the processor? Might facilitate comparisons

How to order expressions? Assume the following have comparitors:
-string
-int
-lists? sets?
-Class objects
Need a definite cascading order of asking individual questions in the tree. Then if the individual quesitons have transitive answers, so too will the larger question.
Proposed order: depth-first, children->bindings->assumptions, Processor: Type.compareTo: (Class (by name)->num children->num assumptions->is bound)->Visitor(visit children->visit assumptions->visit binding). If we've seen a type in the tree before, compare the visit numbers. Should be able to do equals with return compare==0.

Exception caused by multiple keys in a variable assignment mapping to values which share a variable name, but that variable refers to something different.

What's the right solution
A->f(A,B)
B->g(A,B)
if this is valid, the A's and the B's on the right must be either bound to the same thing, or not bound.

Take a set of expressions, extract a set of all variable names that appear in them, coupled with a list of every instance in memory where that variable appears. String -> List<Variable>. For each List<Variable>, must be possible to bind the variables to the same thing. So, there can be only one unique binding in the set.

crawl one target at a time, map variable assignment key -> (map: variable->binding) or null if target isnt expression or variable
also need to crawl unassigned vars in consequent
Bound variables can't change names, so two vars of same name bound to unequal expressions are a game ender.
keep a set of all legal variable names. Go through each assignment target. If a var in the assignment target needs to change, make the binding change in the target. If the change requires setting to a new variable, grab one from the set. If one isn't available, fail.

Drive this with a test.
Simple:  A-> A&B (unbound), B -> B(bound). Variable assignment should have the B's bound.

Need to make ExpressionAndAssumptionVisitor

Want the expression comparitor to accept parameters. Include assumptions or not?
Can accomplish this by creating public paramter seters on the processor, which call protected setters on the expression, which control what gets visited and processed. The assumption-checks can be moved from nodes to the processor.
The processor methods become instance methods.


precedents: A&B -> A, (A->B)&(B->C) -> (A->B)&(B->C) (true)
theorem: (A->B)&(B->C) -> (A->B) (true)
result: A&B -> ((A->B)&(B->C)) (False)

VariableAssignment:
A: A&B
B: (A->B)&(B->C)
C: (A->B)&(B->C)


Need to figure out Variable Assignments and intersections. Intersections happen when using compound theorems. One option: forget compound theorems and add A&B->A&B axiom? Can't because that axiom won't match anything.

f(A,B) & g(A,B) -> h(A,B)

procedure:
Find va1: A,B -> va1(A), va1(B) such that f(va1(A), va1(B)) is known
Find va2: A,B -> va2(A), va2(B) such that g(va2(A), va2(B)) is known

need to unify va1,va2 ==> va so that f(va(A), va(B)) and g(va(A), va(B)) are both known, so that h(va(A), va(B)) will then be inferred.

A: va1(A), va2(A): va(A) consistent with both f and g
B: va1(B), va2(B): va(B) consistent with both

what are the types of va1, va2? Variables are the only types that can be reassigned.
Types: type, operator, basetype, number, numvar, expression, predicate, predvar, theorem
operator, basetype, number cannot be assigned from something not exactly equal















